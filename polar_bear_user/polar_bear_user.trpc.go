// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: polar_bear_user.proto

package polar_bear_user

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// HelloWorldServiceService defines service.
type HelloWorldServiceService interface {
	// UserRegister UserRegister
	UserRegister(ctx context.Context, req *UserRegisterRequest) (*UserRegisterResponse, error)
	// UserLogin UserLogin
	UserLogin(ctx context.Context, req *UserLoginRequest) (*UserLoginResponse, error)
}

func HelloWorldServiceService_UserRegister_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UserRegisterRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(HelloWorldServiceService).UserRegister(ctx, reqbody.(*UserRegisterRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func HelloWorldServiceService_UserLogin_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UserLoginRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(HelloWorldServiceService).UserLogin(ctx, reqbody.(*UserLoginRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// HelloWorldServiceServer_ServiceDesc descriptor for server.RegisterService.
var HelloWorldServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.polarBear.user.HelloWorldService",
	HandlerType: ((*HelloWorldServiceService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.polarBear.user.HelloWorldService/UserRegister",
			Func: HelloWorldServiceService_UserRegister_Handler,
		},
		{
			Name: "/trpc.polarBear.user.HelloWorldService/UserLogin",
			Func: HelloWorldServiceService_UserLogin_Handler,
		},
	},
}

// RegisterHelloWorldServiceService registers service.
func RegisterHelloWorldServiceService(s server.Service, svr HelloWorldServiceService) {
	if err := s.Register(&HelloWorldServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("HelloWorldService register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedHelloWorldService struct{}

// UserRegister UserRegister
func (s *UnimplementedHelloWorldService) UserRegister(ctx context.Context, req *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, errors.New("rpc UserRegister of service HelloWorldService is not implemented")
}

// UserLogin UserLogin
func (s *UnimplementedHelloWorldService) UserLogin(ctx context.Context, req *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, errors.New("rpc UserLogin of service HelloWorldService is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// HelloWorldServiceClientProxy defines service client proxy
type HelloWorldServiceClientProxy interface {
	// UserRegister UserRegister
	UserRegister(ctx context.Context, req *UserRegisterRequest, opts ...client.Option) (rsp *UserRegisterResponse, err error)
	// UserLogin UserLogin
	UserLogin(ctx context.Context, req *UserLoginRequest, opts ...client.Option) (rsp *UserLoginResponse, err error)
}

type HelloWorldServiceClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewHelloWorldServiceClientProxy = func(opts ...client.Option) HelloWorldServiceClientProxy {
	return &HelloWorldServiceClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *HelloWorldServiceClientProxyImpl) UserRegister(ctx context.Context, req *UserRegisterRequest, opts ...client.Option) (*UserRegisterResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.polarBear.user.HelloWorldService/UserRegister")
	msg.WithCalleeServiceName(HelloWorldServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("polarBear")
	msg.WithCalleeServer("user")
	msg.WithCalleeService("HelloWorldService")
	msg.WithCalleeMethod("UserRegister")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &UserRegisterResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *HelloWorldServiceClientProxyImpl) UserLogin(ctx context.Context, req *UserLoginRequest, opts ...client.Option) (*UserLoginResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.polarBear.user.HelloWorldService/UserLogin")
	msg.WithCalleeServiceName(HelloWorldServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("polarBear")
	msg.WithCalleeServer("user")
	msg.WithCalleeService("HelloWorldService")
	msg.WithCalleeMethod("UserLogin")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &UserLoginResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
