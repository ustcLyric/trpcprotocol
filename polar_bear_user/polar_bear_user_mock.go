// Code generated by MockGen. DO NOT EDIT.
// Source: polar_bear_user.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=polar_bear_user_mock.go -package=polar_bear_user --source=polar_bear_user.trpc.go -self_package=github.com/ustcLyric/trpcprotocol/polar_bear_user
//

// Package polar_bear_user is a generated GoMock package.
package polar_bear_user

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockPolarBearUserServiceService is a mock of PolarBearUserServiceService interface.
type MockPolarBearUserServiceService struct {
	ctrl     *gomock.Controller
	recorder *MockPolarBearUserServiceServiceMockRecorder
	isgomock struct{}
}

// MockPolarBearUserServiceServiceMockRecorder is the mock recorder for MockPolarBearUserServiceService.
type MockPolarBearUserServiceServiceMockRecorder struct {
	mock *MockPolarBearUserServiceService
}

// NewMockPolarBearUserServiceService creates a new mock instance.
func NewMockPolarBearUserServiceService(ctrl *gomock.Controller) *MockPolarBearUserServiceService {
	mock := &MockPolarBearUserServiceService{ctrl: ctrl}
	mock.recorder = &MockPolarBearUserServiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolarBearUserServiceService) EXPECT() *MockPolarBearUserServiceServiceMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockPolarBearUserServiceService) GetUserInfo(ctx context.Context, req *GetUserInfoReq) (*GetUserInfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, req)
	ret0, _ := ret[0].(*GetUserInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockPolarBearUserServiceServiceMockRecorder) GetUserInfo(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockPolarBearUserServiceService)(nil).GetUserInfo), ctx, req)
}

// UserLogin mocks base method.
func (m *MockPolarBearUserServiceService) UserLogin(ctx context.Context, req *UserLoginRequest) (*UserLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, req)
	ret0, _ := ret[0].(*UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockPolarBearUserServiceServiceMockRecorder) UserLogin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockPolarBearUserServiceService)(nil).UserLogin), ctx, req)
}

// UserRegister mocks base method.
func (m *MockPolarBearUserServiceService) UserRegister(ctx context.Context, req *UserRegisterRequest) (*UserRegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", ctx, req)
	ret0, _ := ret[0].(*UserRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockPolarBearUserServiceServiceMockRecorder) UserRegister(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockPolarBearUserServiceService)(nil).UserRegister), ctx, req)
}

// MockPolarBearUserServiceClientProxy is a mock of PolarBearUserServiceClientProxy interface.
type MockPolarBearUserServiceClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockPolarBearUserServiceClientProxyMockRecorder
	isgomock struct{}
}

// MockPolarBearUserServiceClientProxyMockRecorder is the mock recorder for MockPolarBearUserServiceClientProxy.
type MockPolarBearUserServiceClientProxyMockRecorder struct {
	mock *MockPolarBearUserServiceClientProxy
}

// NewMockPolarBearUserServiceClientProxy creates a new mock instance.
func NewMockPolarBearUserServiceClientProxy(ctrl *gomock.Controller) *MockPolarBearUserServiceClientProxy {
	mock := &MockPolarBearUserServiceClientProxy{ctrl: ctrl}
	mock.recorder = &MockPolarBearUserServiceClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolarBearUserServiceClientProxy) EXPECT() *MockPolarBearUserServiceClientProxyMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockPolarBearUserServiceClientProxy) GetUserInfo(ctx context.Context, req *GetUserInfoReq, opts ...client.Option) (*GetUserInfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserInfo", varargs...)
	ret0, _ := ret[0].(*GetUserInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockPolarBearUserServiceClientProxyMockRecorder) GetUserInfo(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockPolarBearUserServiceClientProxy)(nil).GetUserInfo), varargs...)
}

// UserLogin mocks base method.
func (m *MockPolarBearUserServiceClientProxy) UserLogin(ctx context.Context, req *UserLoginRequest, opts ...client.Option) (*UserLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserLogin", varargs...)
	ret0, _ := ret[0].(*UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockPolarBearUserServiceClientProxyMockRecorder) UserLogin(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockPolarBearUserServiceClientProxy)(nil).UserLogin), varargs...)
}

// UserRegister mocks base method.
func (m *MockPolarBearUserServiceClientProxy) UserRegister(ctx context.Context, req *UserRegisterRequest, opts ...client.Option) (*UserRegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserRegister", varargs...)
	ret0, _ := ret[0].(*UserRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockPolarBearUserServiceClientProxyMockRecorder) UserRegister(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockPolarBearUserServiceClientProxy)(nil).UserRegister), varargs...)
}
