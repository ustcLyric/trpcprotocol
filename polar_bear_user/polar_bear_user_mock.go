// Code generated by MockGen. DO NOT EDIT.
// Source: polar_bear_user.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=polar_bear_user_mock.go -package=polar_bear_user --source=polar_bear_user.trpc.go -self_package=github.com/ustcLyric/trpcprotocol/polar_bear_user
//

// Package polar_bear_user is a generated GoMock package.
package polar_bear_user

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockHelloWorldServiceService is a mock of HelloWorldServiceService interface.
type MockHelloWorldServiceService struct {
	ctrl     *gomock.Controller
	recorder *MockHelloWorldServiceServiceMockRecorder
	isgomock struct{}
}

// MockHelloWorldServiceServiceMockRecorder is the mock recorder for MockHelloWorldServiceService.
type MockHelloWorldServiceServiceMockRecorder struct {
	mock *MockHelloWorldServiceService
}

// NewMockHelloWorldServiceService creates a new mock instance.
func NewMockHelloWorldServiceService(ctrl *gomock.Controller) *MockHelloWorldServiceService {
	mock := &MockHelloWorldServiceService{ctrl: ctrl}
	mock.recorder = &MockHelloWorldServiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloWorldServiceService) EXPECT() *MockHelloWorldServiceServiceMockRecorder {
	return m.recorder
}

// UserLogin mocks base method.
func (m *MockHelloWorldServiceService) UserLogin(ctx context.Context, req *UserLoginRequest) (*UserLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, req)
	ret0, _ := ret[0].(*UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockHelloWorldServiceServiceMockRecorder) UserLogin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockHelloWorldServiceService)(nil).UserLogin), ctx, req)
}

// UserRegister mocks base method.
func (m *MockHelloWorldServiceService) UserRegister(ctx context.Context, req *UserRegisterRequest) (*UserRegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", ctx, req)
	ret0, _ := ret[0].(*UserRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockHelloWorldServiceServiceMockRecorder) UserRegister(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockHelloWorldServiceService)(nil).UserRegister), ctx, req)
}

// MockHelloWorldServiceClientProxy is a mock of HelloWorldServiceClientProxy interface.
type MockHelloWorldServiceClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockHelloWorldServiceClientProxyMockRecorder
	isgomock struct{}
}

// MockHelloWorldServiceClientProxyMockRecorder is the mock recorder for MockHelloWorldServiceClientProxy.
type MockHelloWorldServiceClientProxyMockRecorder struct {
	mock *MockHelloWorldServiceClientProxy
}

// NewMockHelloWorldServiceClientProxy creates a new mock instance.
func NewMockHelloWorldServiceClientProxy(ctrl *gomock.Controller) *MockHelloWorldServiceClientProxy {
	mock := &MockHelloWorldServiceClientProxy{ctrl: ctrl}
	mock.recorder = &MockHelloWorldServiceClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloWorldServiceClientProxy) EXPECT() *MockHelloWorldServiceClientProxyMockRecorder {
	return m.recorder
}

// UserLogin mocks base method.
func (m *MockHelloWorldServiceClientProxy) UserLogin(ctx context.Context, req *UserLoginRequest, opts ...client.Option) (*UserLoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserLogin", varargs...)
	ret0, _ := ret[0].(*UserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockHelloWorldServiceClientProxyMockRecorder) UserLogin(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockHelloWorldServiceClientProxy)(nil).UserLogin), varargs...)
}

// UserRegister mocks base method.
func (m *MockHelloWorldServiceClientProxy) UserRegister(ctx context.Context, req *UserRegisterRequest, opts ...client.Option) (*UserRegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserRegister", varargs...)
	ret0, _ := ret[0].(*UserRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockHelloWorldServiceClientProxyMockRecorder) UserRegister(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockHelloWorldServiceClientProxy)(nil).UserRegister), varargs...)
}
